name: OnPushToMain

on:
  push:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    outputs:
      changelogSkipped: ${{ steps.changelog.outputs.skipped }}
      changelogVersion: ${{ steps.changelog.outputs.version }}
      changelogTag: ${{ steps.changelog.outputs.tag }}
      changelogCleanChangelog: ${{ steps.changelog.outputs.clean_changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # make sure we get full git history; necessary for nx affected command

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        shell: bash

      - name: Determine base commit hash (find last release/tag)
        run: |
          # if you need to use a specific version
          # git log --oneline --grep="chore(release): v0.1.6" -n1
          # PREVIOUS_TAG_HASH=`git log --oneline --grep="chore(release): v0.1.6" -n1 | cut -d ' ' -f1`
          git --no-pager log --oneline $(git describe --tags --abbrev=0) -n1
          PREVIOUS_TAG_HASH=`git --no-pager log --oneline $(git describe --tags --abbrev=0) -n1 | cut -d ' ' -f1`
          PREVIOUS_TAG=`git --no-pager log --oneline $(git describe --tags --abbrev=0) -n1 | cut -d ' ' -f3 | cut -c2-`
          echo "PREVIOUS_TAG_HASH=$PREVIOUS_TAG_HASH" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "{ \"version\": \"$PREVIOUS_TAG\" }" > ./version.json

      - name: Semantic Release
        id: semanticRelease
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 18
          dry_run: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Semantic Release
      #   run: |
      #     yarn semantic-release --dry_run
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

      - name: Do something when a new release published (FALSE)
        if: steps.semanticRelease.outputs.new_release_published == 'false'
        run: |
          echo ${{ steps.semanticRelease.outputs.new_release_version }}
          echo ${{ steps.semanticRelease.outputs.last_release_version }}
          echo ${{ steps.semanticRelease.outputs.new_release_notes }}


      - name: Do something when a new release published (TRUE)
        if: steps.semanticRelease.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semanticRelease.outputs.new_release_version }}
          echo ${{ steps.semanticRelease.outputs.last_release_version }}
          echo ${{ steps.semanticRelease.outputs.new_release_notes }}